一、题目链接：https://leetcode-cn.com/problems/is-graph-bipartite/

二、题目：
  给定一个无向图graph，当这个图为二分图时返回true。

  如果我们能将一个图的节点集合分割成两个独立的子集A和B，并使图中的每一条边的两个节点一个来自A集合，一个来自B集合，我们就将这个图称为二分图。

  graph将会以邻接表方式给出，graph[i]表示图中与节点i相连的所有节点。每个节点都是一个在0到graph.length-1之间的整数。这图中没有自环和平行边： graph[i] 中不存在i，并且graph[i]中没有重复的值。


  示例 1:
  输入: [[1,3], [0,2], [1,3], [0,2]]
  输出: true
  解释: 
  无向图如下:
  0----1
  |    |
  |    |
  3----2
  我们可以将节点分成两组: {0, 2} 和 {1, 3}。

  示例 2:
  输入: [[1,2,3], [0,2], [0,1,3], [0,2]]
  输出: false
  解释: 
  无向图如下:
  0----1
  | \  |
  |  \ |
  3----2
  我们不能将节点分割成两个独立的子集。
  注意:

  graph 的长度范围为 [1, 100]。
  graph[i] 中的元素的范围为 [0, graph.length - 1]。
  graph[i] 不会包含 i 或者有重复的值。
  图是无向的: 如果j 在 graph[i]里边, 那么 i 也会在 graph[j]里边。
  
三、解题思路：bfs/dfs+图的着色问题
  我们可以将这个图问题转换成为染色问题：如果这个图是二分图，那么它必然可以被二着色。所以我们每次遇到一个结点时，首先检查它是否已经被着色；
如果是，则看是否和前面的着色相兼容；如果是则继续，否则就说明该图不是二分图，返回false。这种图的遍历问题一般既可以用BFS也可以用DFS。

1、BFS：逐个检查每个节点是否已经被染色，如果没有被染色，则首先将其染为颜色0，然后采用BFS依次对和它相连的节点进行检查和染色。如果相连的节点
没有被染色，则将其染为另外一种颜色；否则就检查染色是否和原来兼容，如果不兼容则立即返回false。注意当从一个结点开始的的BFS搜索全部结束时，和
该结点有直接或者间接连接关系的所有结点都会已经被染色了，所以当开始对下一个节点染色的时候，我们就可以大胆将其染为颜色0。这样当整个染色完成的
时候，如果没有发现染色冲突，则说明原来的图就是二分图。

2、DFS：思路其实和BFS非常一致，只不过采用了DFS的搜索策略：首先检查该结点是否已经被染色，如果是，则返回其是否兼容的信息；否则就给结点染色，并
且采用DFS的策略对和其直接或者间接相连的所有结点染色。整个过程中如果发现冲突就提前返回false；否则在最后返回true。

bfs对应的代码：
  class Solution {
  public:
      bool isBipartite(vector<vector<int>>& graph) {
          int n=graph.size();
          vector<int> colors(n,-1);
          for(int i=0;i<n;i++) {
              if (colors[i] == -1) {
                  if (!BFS(graph,colors,0,i))
                      return false;
              }
          }
          return true;
      }

      bool BFS(vector<vector<int>>& graph,vector<int>& colors,int color,int node){
          queue<int> q;
          q.push(node);
          colors[node]=0;
          while (!q.empty()){
              int tempNode=q.front();
              int c=colors[tempNode];
              q.pop();
              int templen=graph[tempNode].size();
              for(int i=0;i<templen;i++){
                  int nodeVal=graph[tempNode][i];
                  if(colors[nodeVal]==-1){
                      q.push(nodeVal);
                      colors[nodeVal]=1-c;
                  }
                  else{
                      if(colors[nodeVal]!=1-c)
                          return false;
                  }
              }
          }
          return true;
      }
  };





  
