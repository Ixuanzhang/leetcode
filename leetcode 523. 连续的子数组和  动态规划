题目链接：https://leetcode-cn.com/problems/continuous-subarray-sum/submissions/

题目：
  给定一个包含非负数的数组和一个目标整数 k，编写一个函数来判断该数组是否含有连续的子数组，其大小至少为 2，总和为 k 的倍数，即总和为 n*k，其中 n 也是一个整数。

  示例 1:

  输入: [23,2,4,6,7], k = 6
  输出: True
  解释: [2,4] 是一个大小为 2 的子数组，并且和为 6。
  示例 2:

  输入: [23,2,6,4,7], k = 6
  输出: True
  解释: [23,2,6,4,7]是大小为 5 的子数组，并且和为 42。
  说明:

  数组的长度不会超过10,000。
  你可以认为所有数字总和在 32 位有符号整数范围内。
  
解答方法：

方法一、传统的动态规划的方法   O（n^2）
  （1）建立累加和数组
  （2）两层for循环，取遍所有可能的子数组  时间复杂度为 O（n^2）
  
  代码：
    class Solution {
    public:
        bool checkSubarraySum(vector<int>& nums, int k) {
            //动态规划 （1）计算累加和 （2）两层遍历，遍历所有的情况，看是否存在为k的倍数    时间复杂度为：O（n^2）
            vector<int> sum;
            int len=nums.size();
            if(len==0 || len==1)    
                return false;
            sum.push_back(nums[0]);
            for(int i=1;i<len;i++)
                sum.push_back(sum[i-1]+nums[i]);
            for(int i=0;i<len;i++){
                for(int j=i+1;j<len;j++){
                    int sumV;
                    if(i==0)
                        sumV=sum[j];
                    else
                        sumV=sum[j]-sum[i-1];
                    if(k==0 && sumV==0)   //针对k为0的情况
                        return true;
                    else if(k!=0 && sumV%k==0)
                        return true;
                }
            }
            return false;
        }
    };
    
    
方法二：  时间复杂度 O（n）
        在每个索引位置i, 计算当前和对k的mod值, 假设在索引x处, sum[0~x] = m*k + mod_x;
        在索引y处, sum[0~y] = n*k + mod_y; 如果mod_x == mod_y且y-x > 1说明sum[x~y]
        即为一个符合要求的连续子数组, 用map来保存每个mod值对应的索引, 一旦出现新的mod值出现
        在map中, 判断索引差是否大于1.
        注意特殊情况: 
        1) 当nums中有连续0, 无论k为何值都是正确的;
        2) 除情况1之外出现k为0都是错误的;
        3) k为负数也是可能的, 但是要将其变为对应正数来求mod.
        此外需要在map中初始化<0,-1>, 其原因在于解决到达某个i时sum恰好可以整除k的情况, 选择-1
        的原因是要求连续子数组长度大于等于2, 这样可以避免第一个数字为0的情况
    代码：
      
      class Solution {
      public:
          bool checkSubarraySum(vector<int>& nums, int k) {  
             int len=nums.size();
             if(len==0 || len==1)
                  return false;
             if(k==0){   //针对k为0的情况进行处理
                  for(int i=1;i<len;i++){
                      if((nums[i-1]==0)&&(nums[i]==0))
                          return true;
                  }
                  return false;
             }
             if(k<0)
                 k=-k;
             unordered_map<int,int> myMap;
             myMap[0]=-1;
             int sum=0;
             for(int i=0;i<len;i++){
                 sum+=nums[i];
                 int mod=sum%k;
                 unordered_map<int, int>::iterator it;
                 it=myMap.find(mod);
                 if(it!=myMap.end()){
                     if(i-(it->second)>1)   //子数组大小必须为2
                         return true;
                 }
                 else{
                     myMap[mod]=i;
                 }
             }
             return false;
          }
      };
        
        
        
