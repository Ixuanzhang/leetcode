中文题目链接：https://leetcode-cn.com/problems/maximum-difference-between-node-and-ancestor/

题目：
  给定二叉树的根节点 root，找出存在于不同节点 A 和 B 之间的最大值 V，其中 V = |A.val - B.val|，且 A 是 B 的祖先。
（如果 A 的任何子节点之一为 B，或者 A 的任何子节点是 B 的祖先，那么我们认为 A 是 B 的祖先）
示例：
    输入：[8,3,10,1,6,null,14,null,null,4,7,13]
    输出：7
    解释： 
    我们有大量的节点与其祖先的差值，其中一些如下：
    |8 - 3| = 5
    |3 - 7| = 4
    |8 - 1| = 7
    |10 - 13| = 3
    在所有可能的差值中，最大值 7 由 |8 - 1| = 7 得出。
 
    提示：
    树中的节点数在 2 到 5000 之间。
    每个节点的值介于 0 到 100000 之间。
    
 
 解题思路：构建新的Node结构，在每个节点处添加自根节点依次往下过程中  到该节点处的最大值和最小值 
   class Solution {
  public:
       struct Node{
       TreeNode* treeNode;
       int max;
       int min;
      };

      int maxAncestorDiff(TreeNode* root) {
          
          int maxV=INT_MIN;
          TreeNode* p=root;
          queue<Node> q;
          q.push(Node{root,root->val,root->val});
          while (!q.empty()){
              Node temp=q.front();
              q.pop();
              if((temp.max-temp.min)>maxV)
                  maxV=temp.max-temp.min;
              if(temp.treeNode->left!=NULL){
                  int tempMax=temp.max,tempMin=temp.min;
                  if(temp.treeNode->left->val>tempMax)
                      tempMax=temp.treeNode->left->val;
                  if(temp.treeNode->left->val<tempMin)
                      tempMin=temp.treeNode->left->val;
                  q.push(Node{temp.treeNode->left,tempMax,tempMin});
              }
              if(temp.treeNode->right!=NULL){
                  int tempMax=temp.max,tempMin=temp.min;
                  if(temp.treeNode->right->val>tempMax)
                      tempMax=temp.treeNode->right->val;
                  if(temp.treeNode->right->val<tempMin)
                      tempMin=temp.treeNode->right->val;
                  q.push(Node{temp.treeNode->right,tempMax,tempMin});
              }
          }
          return maxV;
      }
  }; 
